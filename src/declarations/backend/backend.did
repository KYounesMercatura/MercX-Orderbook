type Vol = 
 record {
   value0: nat;
   value1: nat;
 };
type Txid = blob;
type Timestamp = nat;
type Time = int;
type Tick = 
 record {
   bestAsk: PriceResponse;
   bestBid: PriceResponse;
 };
type Result = 
 variant {
   err: text;
   ok: vec OrderFilled;
 };
type PriceResponse = 
 record {
   price: nat;
   quantity: nat;
 };
type OrderType = 
 variant {
   FAK;
   FOK;
   LMT;
   MKT;
 };
type OrderSide = 
 variant {
   Buy;
   Sell;
 };
type OrderPrice = 
 record {
   price: nat;
   quantity: variant {
               Buy: record {
                      nat;
                      nat;
                    };
               Sell: nat;
             };
 };
type OrderFilled = 
 record {
   counterparty: Txid;
   time: Time;
   token0Value: BalanceChange;
   token1Value: BalanceChange;
 };
type KInterval = nat;
type KBar = 
 record {
   close: nat;
   high: nat;
   kid: nat;
   low: nat;
   open: nat;
   updatedTs: Timestamp;
   vol: Vol;
 };
type BalanceChange = 
 variant {
   CreditRecord: nat;
   DebitRecord: nat;
   NoChange;
 };
service : {
  /// Clear the orderbook (admin-only)
  clearOrderBook: () -> ();
  /// Full orderbook depth (useful for UI)
  depth: (opt nat) ->
   (record {
      ask: vec PriceResponse;
      bid: vec PriceResponse;
    }) query;
  /// ðŸ“Š Return K-line chart data for selected interval
  getK: (KInterval) -> (vec KBar) query;
  /// Get specific order
  getOrder: (blob, opt OrderSide) -> (opt OrderPrice) query;
  /// Check if specific order exists
  inOrderBook: (blob) -> (bool) query;
  /// Top-of-book prices
  level1: () -> (Tick) query;
  /// Remove an order manually
  removeOrder: (blob, opt OrderSide) -> ();
  /// MAIN TRADE FUNCTION
  trade: (blob, OrderSide, nat, nat, OrderType, nat) -> (Result);
}
